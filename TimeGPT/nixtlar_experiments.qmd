
---
title: "Experiments with TimeGPT and nixtlar"
author: "Joseph Rickert"
date: 2025-02-14
description: ""
image: ""
image-alt: ""
categories: ""
editor: source
---


```{r}
#| message: FALSE
#| warning: FALSE
library(tidyverse)
library(forecast)
library(xts)
library(prophet)
library(nixtlar)
```

```{r}
nixtla_client_setup(api_key = "nixak-pClLnoPc6lVWa4SitSyVo8ExtbPAkcnQblW6n3LiFW4QEqe3PT8bC9WlqLJNgpfzPHvNrEB92x5rJKqV")
```


## The Data

The electricity dataset included in the `nixtlar` package contains hourly observations of  electricity consumption generated sourced from the [PJM Interconnection LLC](https://www.pjm.com/), a regional transmission organization that is part of the Eastern Interconnection grid in the United States. There are five different time series with data taken from 2012 to 2018. A look at the data frame shows that the various series do not cover the same time periods.

```{r}
df <- nixtlar::electricity
df_wide <- df |> 
  pivot_wider(names_from = unique_id, values_from = y) 
head(df_wide)
```

Plots indicate that all of the series show periods of considerable volatility. The BE, DE, and FR series appear to be stationary. NP trends upward to the right and the PJM series appears to be nonlinear.
```{r}
df2 <- df |> mutate( time = as.POSIXct(ds, format = "%Y-%m-%d %H:%M:%S")) |> 
                     group_by(unique_id)
p <- df2 |> ggplot(aes(x = time, y = y, color = unique_id)) +
           geom_line() + facet_wrap(~unique_id, scales = "free")
p
```



## TimeGPT Forecsts


```{r}
# nixtla_client_fcst <- nixtla_client_forecast(df, h = 8, level = c(80,95))
# saveRDS(nixtla_client_fcst, "nixtla_client_fcst.rds")
nixtla_client_fcst <- readRDS("nixtla_client_fcst.rds")

ncf_df <-  nixtla_client_fcst |> mutate( time = as.POSIXct(ds, format = "%Y-%m-%d %H:%M:%S")) |> group_by(unique_id)
names(ncf_df) <- c("unique_id", "ds", "TimeGPT",  "lon", "loe", "hie", "hin")
pf <- ncf_df |> ggplot(aes(x = ds, y = TimeGPT, color = unique_id)) +
           geom_line() +
           geom_ribbon(aes(ymin=lon, ymax=hin), linetype=2, alpha=0.1) +
           facet_wrap(~unique_id, scales = "free") 
pf
```


## Create training and test data
```{r}
NF <- 8 # number of periods to forecast

#select the time series
wide_df <- df |> pivot_wider(names_from = unique_id, values_from = y) |>
                    select(ds,BE) |> drop_na() |>
                    rename(y = BE)

train_df <- wide_df %>% filter(row_number() <= n()-NF)
test_df <- tail(wide_df,NF)
#unique_id  is needed for nixtla_client_forecast
train_df <- train_df |> mutate(unique_id = "TS")
test_df <- test_df 
dim(train_df)
dim(test_df)
dim(wide_df)
```




```{r}
#| message: FALSE
#| warning: FALSE
 nixtla_fcst <- nixtla_client_forecast(train_df, h = NF, level = 95)
 saveRDS(nixtla_fcst, "nixtla_f_24.rds")
 #nixtla_fcst <- readRDS("nixtla_f.rds")
names(nixtla_fcst) <- c("unique_id", "ds", "TimeGPT", "lo95", "up95")

```

Here, I create a data frame to hold the actual and forecast values
```{r}
#| message: FALSE
#| warning: FALSE
fcst_df <- tail(nixtla_fcst,NF) |> select(ds,TimeGPT) |> 
           rename(time = ds, tgpt_fcst = TimeGPT) |>
           mutate(elec_actual = test_df$y)
head(fcst_df)
```

## Some Comparative Forecasts

This next section of code reformats the training data into a format that is suitable for the `auto.arima()` and `auto.ets()` functions. Both of these functions require that the data be expressed as a `ts()` object. The original version of this post expressed the data as an `xts()` object: a major error. This change substantially altered the ARIMA and exponential smoothing forecasts. Many thanks to Professor Rob Hyndman for flagging this error. Note that any errors still remaining in this post are all mine.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
auto_train <- train_df |> select(-unique_id) |>
  mutate(time = as.POSIXct(ds, format = "%Y-%m-%d %H:%M:%S")) |> select(-ds)

elec_ts <- ts(auto_train$y, start = c(2016, 10, 22, 0), frequency = 24)
```

### ARIMA Forecast with `auto.arima()`

The `auto.arima()` function from the `forecast` package fits a fairly sophisticated ARIMA(2,1,1)(1.0.1)[24] model. The parameters in parentheses means two autoregressive terms, one difference, one moving average term, one seasonal autoregressive term, no seasonal differencing, and one seasonal moving average term. [24] indicates that the seasonal pattern repeats every 24 observations
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: FALSE
#| warning: FALSE
arima_fcst <- elec_ts |>
  auto.arima() |>
  # number of periods to forecast
  forecast(h = NF , level = 95)

```



### Exponential smoothing forecast with `ets()`

Because I have provided no guidance, the `ets()` function from the `forecast` package fits an ETS(A,A,N) model with an additive error, an additive trend and no seasonality. All parameters are estimated from the data.
```{r}
ets_fcst <- elec_ts |> 
  ets() |>
  # number of periods to forecast
  forecast(h = NF)
```


### Prophet Forecast

I also ask the `prophet()` function from the `prophet` package for an automatic fit using the default parameters. Among other things this means a linear growth curve additive seasonality and automatic estimates for daily seasonality. As above, the model is fit to the data in the `BE_train_df` data frame, but here the `make_future_dataframe()` function creates a data frame with the same structure as `BE_train_df` but with the `ds` column extended by `NF` periods.
```{r}
#| message: FALSE
#| warning: FALSE
prophet_fit <- prophet(train_df)
future <- make_future_dataframe(prophet_fit, periods = NF,  freq = 3600, include_history = FALSE)
prophet_fcst <- predict(prophet_fit, future)
```


## Results and Discussion

Before plotting, Let's have a look at the wide data frame that holds the forecasts.
```{r}
fcst_df2 <- fcst_df |>
             mutate(arima_fcst = as.vector(arima_fcst$mean),
                    ets_fcst = as.vector(ets_fcst$mean),
                    prophet_fcst = prophet_fcst$yhat)
head(fcst_df2)
```

Then, shape the data into long format and plot.
```{r}
fcst_dft2_long <- fcst_df2 %>%
  pivot_longer(!time, names_to = "method", values_to = "mean")

q <- fcst_dft2_long |> ggplot(aes(x = time, y = mean, group = method, color = method)) +
                        geom_line() +
                        geom_point() +
                        ggtitle("TimeGPT vs ARIMA vs ETS vs Prophet vs actual data") 
q
```


```{r}
rms_names <- c("tgpt", "arima", "ets", "prophet")
rms_fcst <- array(NA_real_,
                          dim = 4,
                          dimnames = list(rms_names))
rms_fcst
```



```{r}
RMSE = function(m, o){
  sqrt(mean((m - o)^2))
}
```

```{r}
rms_fcst[1] <- RMSE(fcst_df2$tgpt_fcst, fcst_df2$elec_actual)
rms_fcst[2] <- RMSE(fcst_df2$arima_fcst, fcst_df2$elec_actual)
rms_fcst[3] <- RMSE(fcst_df2$ets_fcst, fcst_df2$elec_actual)
rms_fcst[4] <- RMSE(fcst_df2$prophet_fcst, fcst_df2$elec_actual)
rms_fcst
```

